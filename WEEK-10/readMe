20C:
At the beginning we starting from 1, and then we make a priority queue of all its edges storing their accumulated weight and vertex. And afterIt stored, it will then move on to the next highest priority, which is the edge with least weight, and then update the priority queue with its edges. This will go on until we reach the node n, after which we will then print back the vertexes of the shortest path until reach the n.

601A:
in the first we will first traverse the path followed by the train and calculate the minimum time taken. Then this is done by making a queue of all the possible paths taken by the train and traversing it by its breadth, marking each of the town it has already passed, and the accumulated time to reach it. And if at any point the queue reaches town n, then we will have the shortest time taken by the train. On the other hand, if by the end of the queue we have not reach town n, then it is not possible for the train to reach town n. after that we start repeat the same process for the bus, and finally comparing which of its time taken is shortest or if there is no way to reach the n town.
